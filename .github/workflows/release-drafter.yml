name: Release Drafter

on:
  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - main
  # pull_request event is required only for autolabeler
  pull_request:
    # Only following types are handled by the action, but one can default to all as well
    types: [opened, reopened, synchronize]
  # pull_request_target event is required for autolabeler to support PRs from forks
  # pull_request_target:
  #   types: [opened, reopened, synchronize]

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      # (Optional) GitHub Enterprise requires GHE_HOST variable set
      #- name: Set GHE_HOST
      #  run: |
      #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV

      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v5
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        # with:
        #   config-name: my-config.yml
        #   disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: release_drafter

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Update version
        run: |
          DRAFTED_VERSION="${TAG_NAME#v}"
          CURRENT_VERSION=$(npm pkg get version --workspaces=false | tr -d '"')
          echo "Draft version: $DRAFTED_VERSION"
          echo "Current version: $CURRENT_VERSION"

          if [ "$DRAFTED_VERSION" != "$CURRENT_VERSION" ]; then
            npm version --no-git-tag-version $DRAFTED_VERSION
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
            git add package.json 
            git commit -m "[Auto] Update version to $drafted_version"
            git push origin main
          fi
        env:
          TAG_NAME: ${{ steps.release_drafter.outputs.tag_name }}
